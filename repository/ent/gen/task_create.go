// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngicks/gokugen/repository/ent/gen/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetWorkID sets the "work_id" field.
func (tc *TaskCreate) SetWorkID(s string) *TaskCreate {
	tc.mutation.SetWorkID(s)
	return tc
}

// SetPriority sets the "priority" field.
func (tc *TaskCreate) SetPriority(i int) *TaskCreate {
	tc.mutation.SetPriority(i)
	return tc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePriority(i *int) *TaskCreate {
	if i != nil {
		tc.SetPriority(*i)
	}
	return tc
}

// SetState sets the "state" field.
func (tc *TaskCreate) SetState(t task.State) *TaskCreate {
	tc.mutation.SetState(t)
	return tc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tc *TaskCreate) SetNillableState(t *task.State) *TaskCreate {
	if t != nil {
		tc.SetState(*t)
	}
	return tc
}

// SetErr sets the "err" field.
func (tc *TaskCreate) SetErr(s string) *TaskCreate {
	tc.mutation.SetErr(s)
	return tc
}

// SetNillableErr sets the "err" field if the given value is not nil.
func (tc *TaskCreate) SetNillableErr(s *string) *TaskCreate {
	if s != nil {
		tc.SetErr(*s)
	}
	return tc
}

// SetParam sets the "param" field.
func (tc *TaskCreate) SetParam(m map[string]string) *TaskCreate {
	tc.mutation.SetParam(m)
	return tc
}

// SetMeta sets the "meta" field.
func (tc *TaskCreate) SetMeta(m map[string]string) *TaskCreate {
	tc.mutation.SetMeta(m)
	return tc
}

// SetScheduledAt sets the "scheduled_at" field.
func (tc *TaskCreate) SetScheduledAt(t time.Time) *TaskCreate {
	tc.mutation.SetScheduledAt(t)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetDeadline sets the "deadline" field.
func (tc *TaskCreate) SetDeadline(t time.Time) *TaskCreate {
	tc.mutation.SetDeadline(t)
	return tc
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDeadline(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDeadline(*t)
	}
	return tc
}

// SetCancelledAt sets the "cancelled_at" field.
func (tc *TaskCreate) SetCancelledAt(t time.Time) *TaskCreate {
	tc.mutation.SetCancelledAt(t)
	return tc
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCancelledAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCancelledAt(*t)
	}
	return tc
}

// SetDispatchedAt sets the "dispatched_at" field.
func (tc *TaskCreate) SetDispatchedAt(t time.Time) *TaskCreate {
	tc.mutation.SetDispatchedAt(t)
	return tc
}

// SetNillableDispatchedAt sets the "dispatched_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDispatchedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDispatchedAt(*t)
	}
	return tc
}

// SetDoneAt sets the "done_at" field.
func (tc *TaskCreate) SetDoneAt(t time.Time) *TaskCreate {
	tc.mutation.SetDoneAt(t)
	return tc
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDoneAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDoneAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(s string) *TaskCreate {
	tc.mutation.SetID(s)
	return tc
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.Priority(); !ok {
		v := task.DefaultPriority
		tc.mutation.SetPriority(v)
	}
	if _, ok := tc.mutation.State(); !ok {
		v := task.DefaultState
		tc.mutation.SetState(v)
	}
	if _, ok := tc.mutation.Err(); !ok {
		v := task.DefaultErr
		tc.mutation.SetErr(v)
	}
	if _, ok := tc.mutation.Param(); !ok {
		v := task.DefaultParam
		tc.mutation.SetParam(v)
	}
	if _, ok := tc.mutation.Meta(); !ok {
		v := task.DefaultMeta
		tc.mutation.SetMeta(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.WorkID(); !ok {
		return &ValidationError{Name: "work_id", err: errors.New(`gen: missing required field "Task.work_id"`)}
	}
	if v, ok := tc.mutation.WorkID(); ok {
		if err := task.WorkIDValidator(v); err != nil {
			return &ValidationError{Name: "work_id", err: fmt.Errorf(`gen: validator failed for field "Task.work_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`gen: missing required field "Task.priority"`)}
	}
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`gen: missing required field "Task.state"`)}
	}
	if v, ok := tc.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Task.state": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Err(); !ok {
		return &ValidationError{Name: "err", err: errors.New(`gen: missing required field "Task.err"`)}
	}
	if _, ok := tc.mutation.Param(); !ok {
		return &ValidationError{Name: "param", err: errors.New(`gen: missing required field "Task.param"`)}
	}
	if _, ok := tc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`gen: missing required field "Task.meta"`)}
	}
	if _, ok := tc.mutation.ScheduledAt(); !ok {
		return &ValidationError{Name: "scheduled_at", err: errors.New(`gen: missing required field "Task.scheduled_at"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Task.created_at"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Task.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.WorkID(); ok {
		_spec.SetField(task.FieldWorkID, field.TypeString, value)
		_node.WorkID = value
	}
	if value, ok := tc.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := tc.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := tc.mutation.Err(); ok {
		_spec.SetField(task.FieldErr, field.TypeString, value)
		_node.Err = value
	}
	if value, ok := tc.mutation.Param(); ok {
		_spec.SetField(task.FieldParam, field.TypeJSON, value)
		_node.Param = value
	}
	if value, ok := tc.mutation.Meta(); ok {
		_spec.SetField(task.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if value, ok := tc.mutation.ScheduledAt(); ok {
		_spec.SetField(task.FieldScheduledAt, field.TypeTime, value)
		_node.ScheduledAt = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.Deadline(); ok {
		_spec.SetField(task.FieldDeadline, field.TypeTime, value)
		_node.Deadline = &value
	}
	if value, ok := tc.mutation.CancelledAt(); ok {
		_spec.SetField(task.FieldCancelledAt, field.TypeTime, value)
		_node.CancelledAt = &value
	}
	if value, ok := tc.mutation.DispatchedAt(); ok {
		_spec.SetField(task.FieldDispatchedAt, field.TypeTime, value)
		_node.DispatchedAt = &value
	}
	if value, ok := tc.mutation.DoneAt(); ok {
		_spec.SetField(task.FieldDoneAt, field.TypeTime, value)
		_node.DoneAt = &value
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
