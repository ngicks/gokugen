// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngicks/gokugen/repository/ent/gen/predicate"
	"github.com/ngicks/gokugen/repository/ent/gen/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetWorkID sets the "work_id" field.
func (tu *TaskUpdate) SetWorkID(s string) *TaskUpdate {
	tu.mutation.SetWorkID(s)
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TaskUpdate) SetPriority(i int) *TaskUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePriority(i *int) *TaskUpdate {
	if i != nil {
		tu.SetPriority(*i)
	}
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TaskUpdate) AddPriority(i int) *TaskUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// SetState sets the "state" field.
func (tu *TaskUpdate) SetState(t task.State) *TaskUpdate {
	tu.mutation.SetState(t)
	return tu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableState(t *task.State) *TaskUpdate {
	if t != nil {
		tu.SetState(*t)
	}
	return tu
}

// SetErr sets the "err" field.
func (tu *TaskUpdate) SetErr(s string) *TaskUpdate {
	tu.mutation.SetErr(s)
	return tu
}

// SetNillableErr sets the "err" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableErr(s *string) *TaskUpdate {
	if s != nil {
		tu.SetErr(*s)
	}
	return tu
}

// SetParam sets the "param" field.
func (tu *TaskUpdate) SetParam(m map[string]string) *TaskUpdate {
	tu.mutation.SetParam(m)
	return tu
}

// SetMeta sets the "meta" field.
func (tu *TaskUpdate) SetMeta(m map[string]string) *TaskUpdate {
	tu.mutation.SetMeta(m)
	return tu
}

// SetScheduledAt sets the "scheduled_at" field.
func (tu *TaskUpdate) SetScheduledAt(t time.Time) *TaskUpdate {
	tu.mutation.SetScheduledAt(t)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetDeadline sets the "deadline" field.
func (tu *TaskUpdate) SetDeadline(t time.Time) *TaskUpdate {
	tu.mutation.SetDeadline(t)
	return tu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeadline(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDeadline(*t)
	}
	return tu
}

// ClearDeadline clears the value of the "deadline" field.
func (tu *TaskUpdate) ClearDeadline() *TaskUpdate {
	tu.mutation.ClearDeadline()
	return tu
}

// SetCancelledAt sets the "cancelled_at" field.
func (tu *TaskUpdate) SetCancelledAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCancelledAt(t)
	return tu
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCancelledAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCancelledAt(*t)
	}
	return tu
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (tu *TaskUpdate) ClearCancelledAt() *TaskUpdate {
	tu.mutation.ClearCancelledAt()
	return tu
}

// SetDispatchedAt sets the "dispatched_at" field.
func (tu *TaskUpdate) SetDispatchedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetDispatchedAt(t)
	return tu
}

// SetNillableDispatchedAt sets the "dispatched_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDispatchedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDispatchedAt(*t)
	}
	return tu
}

// ClearDispatchedAt clears the value of the "dispatched_at" field.
func (tu *TaskUpdate) ClearDispatchedAt() *TaskUpdate {
	tu.mutation.ClearDispatchedAt()
	return tu
}

// SetDoneAt sets the "done_at" field.
func (tu *TaskUpdate) SetDoneAt(t time.Time) *TaskUpdate {
	tu.mutation.SetDoneAt(t)
	return tu
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDoneAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDoneAt(*t)
	}
	return tu
}

// ClearDoneAt clears the value of the "done_at" field.
func (tu *TaskUpdate) ClearDoneAt() *TaskUpdate {
	tu.mutation.ClearDoneAt()
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.WorkID(); ok {
		if err := task.WorkIDValidator(v); err != nil {
			return &ValidationError{Name: "work_id", err: fmt.Errorf(`gen: validator failed for field "Task.work_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Task.state": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.WorkID(); ok {
		_spec.SetField(task.FieldWorkID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Err(); ok {
		_spec.SetField(task.FieldErr, field.TypeString, value)
	}
	if value, ok := tu.mutation.Param(); ok {
		_spec.SetField(task.FieldParam, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.Meta(); ok {
		_spec.SetField(task.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.ScheduledAt(); ok {
		_spec.SetField(task.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Deadline(); ok {
		_spec.SetField(task.FieldDeadline, field.TypeTime, value)
	}
	if tu.mutation.DeadlineCleared() {
		_spec.ClearField(task.FieldDeadline, field.TypeTime)
	}
	if value, ok := tu.mutation.CancelledAt(); ok {
		_spec.SetField(task.FieldCancelledAt, field.TypeTime, value)
	}
	if tu.mutation.CancelledAtCleared() {
		_spec.ClearField(task.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := tu.mutation.DispatchedAt(); ok {
		_spec.SetField(task.FieldDispatchedAt, field.TypeTime, value)
	}
	if tu.mutation.DispatchedAtCleared() {
		_spec.ClearField(task.FieldDispatchedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.DoneAt(); ok {
		_spec.SetField(task.FieldDoneAt, field.TypeTime, value)
	}
	if tu.mutation.DoneAtCleared() {
		_spec.ClearField(task.FieldDoneAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetWorkID sets the "work_id" field.
func (tuo *TaskUpdateOne) SetWorkID(s string) *TaskUpdateOne {
	tuo.mutation.SetWorkID(s)
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TaskUpdateOne) SetPriority(i int) *TaskUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePriority(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetPriority(*i)
	}
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TaskUpdateOne) AddPriority(i int) *TaskUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// SetState sets the "state" field.
func (tuo *TaskUpdateOne) SetState(t task.State) *TaskUpdateOne {
	tuo.mutation.SetState(t)
	return tuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableState(t *task.State) *TaskUpdateOne {
	if t != nil {
		tuo.SetState(*t)
	}
	return tuo
}

// SetErr sets the "err" field.
func (tuo *TaskUpdateOne) SetErr(s string) *TaskUpdateOne {
	tuo.mutation.SetErr(s)
	return tuo
}

// SetNillableErr sets the "err" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableErr(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetErr(*s)
	}
	return tuo
}

// SetParam sets the "param" field.
func (tuo *TaskUpdateOne) SetParam(m map[string]string) *TaskUpdateOne {
	tuo.mutation.SetParam(m)
	return tuo
}

// SetMeta sets the "meta" field.
func (tuo *TaskUpdateOne) SetMeta(m map[string]string) *TaskUpdateOne {
	tuo.mutation.SetMeta(m)
	return tuo
}

// SetScheduledAt sets the "scheduled_at" field.
func (tuo *TaskUpdateOne) SetScheduledAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetScheduledAt(t)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetDeadline sets the "deadline" field.
func (tuo *TaskUpdateOne) SetDeadline(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDeadline(t)
	return tuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeadline(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDeadline(*t)
	}
	return tuo
}

// ClearDeadline clears the value of the "deadline" field.
func (tuo *TaskUpdateOne) ClearDeadline() *TaskUpdateOne {
	tuo.mutation.ClearDeadline()
	return tuo
}

// SetCancelledAt sets the "cancelled_at" field.
func (tuo *TaskUpdateOne) SetCancelledAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCancelledAt(t)
	return tuo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCancelledAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCancelledAt(*t)
	}
	return tuo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (tuo *TaskUpdateOne) ClearCancelledAt() *TaskUpdateOne {
	tuo.mutation.ClearCancelledAt()
	return tuo
}

// SetDispatchedAt sets the "dispatched_at" field.
func (tuo *TaskUpdateOne) SetDispatchedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDispatchedAt(t)
	return tuo
}

// SetNillableDispatchedAt sets the "dispatched_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDispatchedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDispatchedAt(*t)
	}
	return tuo
}

// ClearDispatchedAt clears the value of the "dispatched_at" field.
func (tuo *TaskUpdateOne) ClearDispatchedAt() *TaskUpdateOne {
	tuo.mutation.ClearDispatchedAt()
	return tuo
}

// SetDoneAt sets the "done_at" field.
func (tuo *TaskUpdateOne) SetDoneAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDoneAt(t)
	return tuo
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDoneAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDoneAt(*t)
	}
	return tuo
}

// ClearDoneAt clears the value of the "done_at" field.
func (tuo *TaskUpdateOne) ClearDoneAt() *TaskUpdateOne {
	tuo.mutation.ClearDoneAt()
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.WorkID(); ok {
		if err := task.WorkIDValidator(v); err != nil {
			return &ValidationError{Name: "work_id", err: fmt.Errorf(`gen: validator failed for field "Task.work_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Task.state": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.WorkID(); ok {
		_spec.SetField(task.FieldWorkID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Err(); ok {
		_spec.SetField(task.FieldErr, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Param(); ok {
		_spec.SetField(task.FieldParam, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.Meta(); ok {
		_spec.SetField(task.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.ScheduledAt(); ok {
		_spec.SetField(task.FieldScheduledAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Deadline(); ok {
		_spec.SetField(task.FieldDeadline, field.TypeTime, value)
	}
	if tuo.mutation.DeadlineCleared() {
		_spec.ClearField(task.FieldDeadline, field.TypeTime)
	}
	if value, ok := tuo.mutation.CancelledAt(); ok {
		_spec.SetField(task.FieldCancelledAt, field.TypeTime, value)
	}
	if tuo.mutation.CancelledAtCleared() {
		_spec.ClearField(task.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.DispatchedAt(); ok {
		_spec.SetField(task.FieldDispatchedAt, field.TypeTime, value)
	}
	if tuo.mutation.DispatchedAtCleared() {
		_spec.ClearField(task.FieldDispatchedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.DoneAt(); ok {
		_spec.SetField(task.FieldDoneAt, field.TypeTime, value)
	}
	if tuo.mutation.DoneAtCleared() {
		_spec.ClearField(task.FieldDoneAt, field.TypeTime)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
