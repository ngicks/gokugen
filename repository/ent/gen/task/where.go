// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ngicks/gokugen/repository/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldID, id))
}

// WorkID applies equality check predicate on the "work_id" field. It's identical to WorkIDEQ.
func WorkID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWorkID, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPriority, v))
}

// Err applies equality check predicate on the "err" field. It's identical to ErrEQ.
func Err(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErr, v))
}

// ScheduledAt applies equality check predicate on the "scheduled_at" field. It's identical to ScheduledAtEQ.
func ScheduledAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScheduledAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeadline, v))
}

// CancelledAt applies equality check predicate on the "cancelled_at" field. It's identical to CancelledAtEQ.
func CancelledAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCancelledAt, v))
}

// DispatchedAt applies equality check predicate on the "dispatched_at" field. It's identical to DispatchedAtEQ.
func DispatchedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDispatchedAt, v))
}

// DoneAt applies equality check predicate on the "done_at" field. It's identical to DoneAtEQ.
func DoneAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDoneAt, v))
}

// WorkIDEQ applies the EQ predicate on the "work_id" field.
func WorkIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWorkID, v))
}

// WorkIDNEQ applies the NEQ predicate on the "work_id" field.
func WorkIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldWorkID, v))
}

// WorkIDIn applies the In predicate on the "work_id" field.
func WorkIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldWorkID, vs...))
}

// WorkIDNotIn applies the NotIn predicate on the "work_id" field.
func WorkIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldWorkID, vs...))
}

// WorkIDGT applies the GT predicate on the "work_id" field.
func WorkIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldWorkID, v))
}

// WorkIDGTE applies the GTE predicate on the "work_id" field.
func WorkIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldWorkID, v))
}

// WorkIDLT applies the LT predicate on the "work_id" field.
func WorkIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldWorkID, v))
}

// WorkIDLTE applies the LTE predicate on the "work_id" field.
func WorkIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldWorkID, v))
}

// WorkIDContains applies the Contains predicate on the "work_id" field.
func WorkIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldWorkID, v))
}

// WorkIDHasPrefix applies the HasPrefix predicate on the "work_id" field.
func WorkIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldWorkID, v))
}

// WorkIDHasSuffix applies the HasSuffix predicate on the "work_id" field.
func WorkIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldWorkID, v))
}

// WorkIDEqualFold applies the EqualFold predicate on the "work_id" field.
func WorkIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldWorkID, v))
}

// WorkIDContainsFold applies the ContainsFold predicate on the "work_id" field.
func WorkIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldWorkID, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPriority, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldState, vs...))
}

// ErrEQ applies the EQ predicate on the "err" field.
func ErrEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldErr, v))
}

// ErrNEQ applies the NEQ predicate on the "err" field.
func ErrNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldErr, v))
}

// ErrIn applies the In predicate on the "err" field.
func ErrIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldErr, vs...))
}

// ErrNotIn applies the NotIn predicate on the "err" field.
func ErrNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldErr, vs...))
}

// ErrGT applies the GT predicate on the "err" field.
func ErrGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldErr, v))
}

// ErrGTE applies the GTE predicate on the "err" field.
func ErrGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldErr, v))
}

// ErrLT applies the LT predicate on the "err" field.
func ErrLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldErr, v))
}

// ErrLTE applies the LTE predicate on the "err" field.
func ErrLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldErr, v))
}

// ErrContains applies the Contains predicate on the "err" field.
func ErrContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldErr, v))
}

// ErrHasPrefix applies the HasPrefix predicate on the "err" field.
func ErrHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldErr, v))
}

// ErrHasSuffix applies the HasSuffix predicate on the "err" field.
func ErrHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldErr, v))
}

// ErrEqualFold applies the EqualFold predicate on the "err" field.
func ErrEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldErr, v))
}

// ErrContainsFold applies the ContainsFold predicate on the "err" field.
func ErrContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldErr, v))
}

// ScheduledAtEQ applies the EQ predicate on the "scheduled_at" field.
func ScheduledAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScheduledAt, v))
}

// ScheduledAtNEQ applies the NEQ predicate on the "scheduled_at" field.
func ScheduledAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldScheduledAt, v))
}

// ScheduledAtIn applies the In predicate on the "scheduled_at" field.
func ScheduledAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldScheduledAt, vs...))
}

// ScheduledAtNotIn applies the NotIn predicate on the "scheduled_at" field.
func ScheduledAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldScheduledAt, vs...))
}

// ScheduledAtGT applies the GT predicate on the "scheduled_at" field.
func ScheduledAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldScheduledAt, v))
}

// ScheduledAtGTE applies the GTE predicate on the "scheduled_at" field.
func ScheduledAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldScheduledAt, v))
}

// ScheduledAtLT applies the LT predicate on the "scheduled_at" field.
func ScheduledAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldScheduledAt, v))
}

// ScheduledAtLTE applies the LTE predicate on the "scheduled_at" field.
func ScheduledAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldScheduledAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDeadline))
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDeadline))
}

// CancelledAtEQ applies the EQ predicate on the "cancelled_at" field.
func CancelledAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCancelledAt, v))
}

// CancelledAtNEQ applies the NEQ predicate on the "cancelled_at" field.
func CancelledAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCancelledAt, v))
}

// CancelledAtIn applies the In predicate on the "cancelled_at" field.
func CancelledAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCancelledAt, vs...))
}

// CancelledAtNotIn applies the NotIn predicate on the "cancelled_at" field.
func CancelledAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCancelledAt, vs...))
}

// CancelledAtGT applies the GT predicate on the "cancelled_at" field.
func CancelledAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCancelledAt, v))
}

// CancelledAtGTE applies the GTE predicate on the "cancelled_at" field.
func CancelledAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCancelledAt, v))
}

// CancelledAtLT applies the LT predicate on the "cancelled_at" field.
func CancelledAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCancelledAt, v))
}

// CancelledAtLTE applies the LTE predicate on the "cancelled_at" field.
func CancelledAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCancelledAt, v))
}

// CancelledAtIsNil applies the IsNil predicate on the "cancelled_at" field.
func CancelledAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCancelledAt))
}

// CancelledAtNotNil applies the NotNil predicate on the "cancelled_at" field.
func CancelledAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCancelledAt))
}

// DispatchedAtEQ applies the EQ predicate on the "dispatched_at" field.
func DispatchedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDispatchedAt, v))
}

// DispatchedAtNEQ applies the NEQ predicate on the "dispatched_at" field.
func DispatchedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDispatchedAt, v))
}

// DispatchedAtIn applies the In predicate on the "dispatched_at" field.
func DispatchedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDispatchedAt, vs...))
}

// DispatchedAtNotIn applies the NotIn predicate on the "dispatched_at" field.
func DispatchedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDispatchedAt, vs...))
}

// DispatchedAtGT applies the GT predicate on the "dispatched_at" field.
func DispatchedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDispatchedAt, v))
}

// DispatchedAtGTE applies the GTE predicate on the "dispatched_at" field.
func DispatchedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDispatchedAt, v))
}

// DispatchedAtLT applies the LT predicate on the "dispatched_at" field.
func DispatchedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDispatchedAt, v))
}

// DispatchedAtLTE applies the LTE predicate on the "dispatched_at" field.
func DispatchedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDispatchedAt, v))
}

// DispatchedAtIsNil applies the IsNil predicate on the "dispatched_at" field.
func DispatchedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDispatchedAt))
}

// DispatchedAtNotNil applies the NotNil predicate on the "dispatched_at" field.
func DispatchedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDispatchedAt))
}

// DoneAtEQ applies the EQ predicate on the "done_at" field.
func DoneAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDoneAt, v))
}

// DoneAtNEQ applies the NEQ predicate on the "done_at" field.
func DoneAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDoneAt, v))
}

// DoneAtIn applies the In predicate on the "done_at" field.
func DoneAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDoneAt, vs...))
}

// DoneAtNotIn applies the NotIn predicate on the "done_at" field.
func DoneAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDoneAt, vs...))
}

// DoneAtGT applies the GT predicate on the "done_at" field.
func DoneAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDoneAt, v))
}

// DoneAtGTE applies the GTE predicate on the "done_at" field.
func DoneAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDoneAt, v))
}

// DoneAtLT applies the LT predicate on the "done_at" field.
func DoneAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDoneAt, v))
}

// DoneAtLTE applies the LTE predicate on the "done_at" field.
func DoneAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDoneAt, v))
}

// DoneAtIsNil applies the IsNil predicate on the "done_at" field.
func DoneAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDoneAt))
}

// DoneAtNotNil applies the NotNil predicate on the "done_at" field.
func DoneAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDoneAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		p(s.Not())
	})
}
