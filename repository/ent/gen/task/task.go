// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkID holds the string denoting the work_id field in the database.
	FieldWorkID = "work_id"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldErr holds the string denoting the err field in the database.
	FieldErr = "err"
	// FieldParam holds the string denoting the param field in the database.
	FieldParam = "param"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// FieldScheduledAt holds the string denoting the scheduled_at field in the database.
	FieldScheduledAt = "scheduled_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// FieldCancelledAt holds the string denoting the cancelled_at field in the database.
	FieldCancelledAt = "cancelled_at"
	// FieldDispatchedAt holds the string denoting the dispatched_at field in the database.
	FieldDispatchedAt = "dispatched_at"
	// FieldDoneAt holds the string denoting the done_at field in the database.
	FieldDoneAt = "done_at"
	// Table holds the table name of the task in the database.
	Table = "tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldWorkID,
	FieldPriority,
	FieldState,
	FieldErr,
	FieldParam,
	FieldMeta,
	FieldScheduledAt,
	FieldCreatedAt,
	FieldDeadline,
	FieldCancelledAt,
	FieldDispatchedAt,
	FieldDoneAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// WorkIDValidator is a validator for the "work_id" field. It is called by the builders before save.
	WorkIDValidator func(string) error
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultErr holds the default value on creation for the "err" field.
	DefaultErr string
	// DefaultParam holds the default value on creation for the "param" field.
	DefaultParam map[string]string
	// DefaultMeta holds the default value on creation for the "meta" field.
	DefaultMeta map[string]string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// StateScheduled is the default value of the State enum.
const DefaultState = StateScheduled

// State values.
const (
	StateScheduled  State = "scheduled"
	StateDispatched State = "dispatched"
	StateCancelled  State = "cancelled"
	StateDone       State = "done"
	StateErr        State = "err"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateScheduled, StateDispatched, StateCancelled, StateDone, StateErr:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkID orders the results by the work_id field.
func ByWorkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkID, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByErr orders the results by the err field.
func ByErr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErr, opts...).ToFunc()
}

// ByScheduledAt orders the results by the scheduled_at field.
func ByScheduledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeadline orders the results by the deadline field.
func ByDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeadline, opts...).ToFunc()
}

// ByCancelledAt orders the results by the cancelled_at field.
func ByCancelledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelledAt, opts...).ToFunc()
}

// ByDispatchedAt orders the results by the dispatched_at field.
func ByDispatchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDispatchedAt, opts...).ToFunc()
}

// ByDoneAt orders the results by the done_at field.
func ByDoneAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoneAt, opts...).ToFunc()
}
